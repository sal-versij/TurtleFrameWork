class QueryableDictionary extends Array{constructor(dict){super(...Object.entries(dict||{}));}
clone(){return new QueryableDictionary(...this.dict);}
get(i){return this.data.find(x=>x[0]==i)[1];}
get dict(){var out={};for(var _ of this)
out[_[0]]=_[1];return out;}
static convertToDict(qd){var out={};for(var _ of qd)
out[_[0]]=_[1];return out;}
static fromArray(qd){return new QueryableDictionary(QueryableDictionary.convertToDict(qd));}}
class LINQQuery{constructor(...queue){this.queue=queue||[];}
clone(){return new LINQQuery(...this.queue);}
query(data){var out=data;for(var _ of this.queue)
out=_.f(out,..._.args);return out;}
add(f,...args){this.queue.push({f:f,args:args,});}
Select(f){this.add(LINQQuery._select,f);return this;}
static*_select(g,f){for(var _ of g)
yield f(_);}
Where(f){this.add(LINQQuery._where,f);return this;}
static*_where(g,f){for(var _ of g)
if(f(_))
yield _;}
GroupBy(f){this.add(LINQQuery._groupby,f);return this;}
static*_groupby(g,f){var out={};for(var _ of g){var i=f(_);if(out[i])
out[i].push(_);else
out[i]=[_];}
yield*new QueryableDictionary(out);}
Order(f){this.add(LINQQuery._order,f);return this;}
static*_order(g,f){yield*[...g()].sort(f);}
First(f){this.add(LINQQuery._first,f);return this;}
static _first(g,f){for(var _ of g)
if(f(_))
return _;}
Last(f){this.add(LINQQuery._last,f);return this;}
static _last(g,f){var out=null;for(var _ of g)
if(f(_))
out=_;return out;}
All(f){this.add(LINQQuery._all,f);return this;}
static _all(g,f){for(var _ of g)
if(!f(_))
return false;return true;}
Any(f){this.add(LINQQuery._any,f);return this;}
static _any(g,f){for(var _ of g)
if(f(_))
return true;return false;}
ToDictionary(k,v){this.add(LINQQuery._todictionary,k,v);return this;}
static*_todictionary(g,k,v){var out={};for(var _ of g){out[k(_)]=v(_);}
yield*new QueryableDictionary(out);}
ToArray(v){this.add(LINQQuery._toarray,v);return this;}
static*_toarray(g,v){for(var _ of g)
yield v(_);}}
function test(n){a=(new LINQQuery()).Select(x=>{return{value:x}}).Where(x=>x.value>10).Select(x=>{x.sqrt=Math.floor(Math.sqrt(x.value));return x}).GroupBy(x=>x.sqrt).ToDictionary(x=>x[0],x=>x[1]);var b=log(a.query(range(n||100)));return QueryableDictionary.fromArray(b).dict;}
